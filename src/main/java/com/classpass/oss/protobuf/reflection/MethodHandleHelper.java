/**
 * Copyright 2021 ClassPass
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package com.classpass.oss.protobuf.reflection;

import java.lang.invoke.MethodHandle;

/**
 * MethodHandle calls are very sensitive to the generated bytecode, and Kotlin doesn't produce the right types, so we
 * do this bit in Java.
 */
class MethodHandleHelper {

    /**
     * @param returnType Class that the result will be cast to
     * @param handle     MethodHandle to invoke
     * @param <T>        Type of returnType
     * @return the result of invoking the handle and casting
     */
    static <T> T invokeNoArgs(Class<T> returnType, MethodHandle handle) throws Throwable {
        return returnType.cast(handle.invoke());
    }

    /**
     * @param returnType Class that the result will be cast to
     * @param handle     MethodHandle to invoke
     * @param arg        the argument to pass
     * @param <S>        Type of the arg
     * @param <T>        Type of returnType
     * @return the result of invoking the handle and casting
     */
    static <S, T> T invokeSingleArg(Class<T> returnType, MethodHandle handle, S arg) throws Throwable {
        return returnType.cast(handle.invoke(arg));
    }
}
